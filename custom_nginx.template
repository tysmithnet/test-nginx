# ---------------------
# custom_nginx.template
# ---------------------

worker_processes ${{NGINX_WORKER_PROCESSES}}; # can be set by kong.conf
daemon ${{NGINX_DAEMON}};                     # can be set by kong.conf

pid pids/nginx.pid;                      # this setting is mandatory
error_log logs/error.log ${{LOG_LEVEL}}; # can be set by kong.conf
events {}

http {

    charset UTF-8;
    server_tokens off;
> if anonymous_reports then
    ${{SYSLOG_REPORTS}}
> end
    error_log ${{PROXY_ERROR_LOG}} ${{LOG_LEVEL}};
    lua_package_path       '${{LUA_PACKAGE_PATH}};;';
    lua_package_cpath      '${{LUA_PACKAGE_CPATH}};;';
    lua_socket_pool_size   ${{LUA_SOCKET_POOL_SIZE}};
    lua_socket_log_errors  off;
    lua_max_running_timers 4096;
    lua_max_pending_timers 16384;
    lua_ssl_verify_depth   ${{LUA_SSL_VERIFY_DEPTH}};
> if lua_ssl_trusted_certificate then
    lua_ssl_trusted_certificate '${{LUA_SSL_TRUSTED_CERTIFICATE}}';
> end
    lua_shared_dict kong                        5m;
    lua_shared_dict kong_locks                  8m;
    lua_shared_dict kong_healthchecks           5m;
    lua_shared_dict kong_process_events         5m;
    lua_shared_dict kong_cluster_events         5m;
    lua_shared_dict kong_rate_limiting_counters 12m;
    lua_shared_dict kong_core_db_cache          ${{MEM_CACHE_SIZE}};
    lua_shared_dict kong_core_db_cache_miss     12m;
    lua_shared_dict kong_db_cache               ${{MEM_CACHE_SIZE}};
    lua_shared_dict kong_db_cache_miss          12m;
> if database == "off" then
    lua_shared_dict kong_core_db_cache_2        ${{MEM_CACHE_SIZE}};
    lua_shared_dict kong_core_db_cache_miss_2   12m;
    lua_shared_dict kong_db_cache_2             ${{MEM_CACHE_SIZE}};
    lua_shared_dict kong_db_cache_miss_2        12m;
> end
> if database == "cassandra" then
    lua_shared_dict kong_cassandra              5m;
> end
> if role == "control_plane" then
    lua_shared_dict kong_clustering             5m;
> end
    underscores_in_headers on;
> if ssl_ciphers then
    ssl_ciphers ${{SSL_CIPHERS}};
> end
    # injected nginx_http_* directives
> for _, el in ipairs(nginx_http_directives) do
    $(el.name) $(el.value);
> end
    init_by_lua_block {
        Kong = require 'kong'
        Kong.init()
    }
    init_worker_by_lua_block {
        Kong.init_worker()
    }

> if (role == "traditional" or role == "data_plane") and #proxy_listeners > 0 then
    upstream kong_upstream {
        server 0.0.0.1;
        balancer_by_lua_block {
            Kong.balancer()
        }
        # injected nginx_upstream_* directives
> for _, el in ipairs(nginx_upstream_directives) do
        $(el.name) $(el.value);
> end
    }

    server {
        server_name kong;
        listen 8000;

        location / {
            root /var/www;
            index index.htm index.html;
            try_files $uri $uri/ /index.html;
        }

        location /api/ {
            default_type                    '';
            set $ctx_ref                    '';
            set $upstream_te                '';
            set $upstream_host              '';
            set $upstream_upgrade           '';
            set $upstream_connection        '';
            set $upstream_scheme            '';
            set $upstream_uri               '';
            set $upstream_x_forwarded_for   '';
            set $upstream_x_forwarded_proto '';
            set $upstream_x_forwarded_host  '';
            set $upstream_x_forwarded_port  '';
            set $kong_proxy_mode            'http';
            proxy_http_version    1.1;
            proxy_set_header      TE                $upstream_te;
            proxy_set_header      Host              $upstream_host;
            proxy_set_header      Upgrade           $upstream_upgrade;
            proxy_set_header      Connection        $upstream_connection;
            proxy_set_header      X-Forwarded-For   $upstream_x_forwarded_for;
            proxy_set_header      X-Forwarded-Proto $upstream_x_forwarded_proto;
            proxy_set_header      X-Forwarded-Host  $upstream_x_forwarded_host;
            proxy_set_header      X-Forwarded-Port  $upstream_x_forwarded_port;
            proxy_set_header      X-Real-IP         $remote_addr;
            proxy_pass_header     Server;
            proxy_pass_header     Date;
            proxy_ssl_name        $upstream_host;
            proxy_ssl_server_name on;
> if client_ssl then
            proxy_ssl_certificate ${{CLIENT_SSL_CERT}};
            proxy_ssl_certificate_key ${{CLIENT_SSL_CERT_KEY}};
> end
            proxy_pass            $upstream_scheme://kong_upstream$upstream_uri;
        }
    }
> end -- (role == "traditional" or role == "data_plane") and #proxy_listeners > 0

}